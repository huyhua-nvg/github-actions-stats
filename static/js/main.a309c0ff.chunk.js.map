{"version":3,"sources":["pages/DetailsTable.tsx","pages/WorkflowStats.tsx","index.tsx"],"names":["DetailsTable","data","variant","map","user","url","branch","href","isExternal","octokit","Octokit","auth","process","conclusionValues","conclusion2colorScheme","WorkflowStats","owner","repo","workflowId","useState","workflowRunsStats","setWorkflowRunsStats","selectedConclusion","setSelectedConclusion","selectedDatum","setSelectedDatum","loading","setLoading","useEffect","actions","listWorkflowRuns","workflow_id","per_page","then","specificWorkflowRuns","stats","totalRuns","total_count","conclusion","success","failure","cancelled","startup_failure","durations","earliestRun","Date","getTime","latestRun","workflow_runs","run","status","createdAtTime","parse","created_at","run_started_at","durationMs","updated_at","push","duration","details","actor","login","html_url","head_branch","Math","min","max","console","log","catch","e","error","handleConclusionSelection","selection","pt","thickness","speed","emptyColor","color","size","display","maxW","mx","justifyContent","flexDirection","spacing","v","borderRadius","colorScheme","onClick","bind","s","toUpperCase","slice","toLocaleDateString","domainPadding","width","height","containerComponent","labels","datum","y","x","toFixed","labelComponent","cornerRadius","flyoutStyle","fill","stroke","textAnchor","text","dependentAxis","label","style","strokeWidth","binSpacing","bins","events","target","eventHandlers","mutation","props","binnedData","d","a","theme","extendTheme","colors","brand","activeBlue","tabStyle","selectedTabStyle","bg","App","setOwner","setRepo","workflowsList","setWorkflowsList","toast","useToast","handleSubmit","event","preventDefault","listRepoWorkflows","value","workflows","title","description","toString","isClosable","direction","onSubmit","placeholder","name","w","type","isLazy","orientation","align","sx","textAlign","templateRows","templateColumns","gap","colSpan","workflow","_hover","_selected","id","ReactDOM","render","StrictMode","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.a309c0ff.chunk.js","sourcesContent":["import {Link, Table, TableCaption, TableContainer, Tbody, Td, Th, Thead, Tr} from \"@chakra-ui/react\"\n\ntype Props = {\n    data: {\n        branch: string\n        user: string\n        url: string\n    }[]\n}\n\nexport const DetailsTable = ({data}: Props) => {\n    return (\n        <TableContainer>\n            <Table variant='simple'>\n                <Thead>\n                    <Tr>\n                        <Th>User</Th>\n                        <Th>Branch</Th>\n                        <Th>Link</Th>\n                    </Tr>\n                </Thead>\n                <Tbody>\n                    {data.map(({user, url, branch}) => (\n                        <Tr>\n                            <Td>{user}</Td>\n                            <Td>{branch}</Td>\n                            <Td><Link href={url} isExternal>Action</Link></Td>\n                        </Tr>\n                    ))}\n                </Tbody>\n            </Table>\n        </TableContainer>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport {Box, Center, Flex, HStack, Spinner, Button } from \"@chakra-ui/react\"\nimport { Octokit } from \"@octokit/rest\";\nimport {\n    VictoryAxis,\n    VictoryChart,\n    VictoryHistogram,\n    VictoryLabel,\n    VictoryTooltip,\n    VictoryVoronoiContainer\n} from 'victory';\nimport { DetailsTable } from \"./DetailsTable\";\n\nconst octokit = new Octokit({\n    auth: process.env.REACT_APP_GITHUB_TOKEN\n});\n\ntype Props = {\n    owner: string\n    repo: string\n    workflowId: number\n}\nconst conclusionValues = [\n    \"success\" ,\n    \"failure\" ,\n    \"cancelled\" ,\n    \"startup_failure\"\n] as const;\ntype Conclusions = typeof conclusionValues[number];\n\nconst conclusion2colorScheme = {\n    \"success\": \"green\",\n    \"failure\": \"red\",\n    \"cancelled\": \"yellow\",\n    \"startup_failure\": \"facebook\"\n}\nconst capitalize = s => s && s[0].toUpperCase() + s.slice(1)\n\ntype RunDetails = {\n    user: string,\n    url: string,\n    branch: string,\n}\ntype RunResults = {\n    duration: number,\n    details: RunDetails,\n}\n\nexport const WorkflowStats = ({owner, repo, workflowId}: Props) => {\n    const [workflowRunsStats, setWorkflowRunsStats] = useState<any>({})\n    const [selectedConclusion, setSelectedConclusion] = useState<Conclusions>(\"success\")\n    const [selectedDatum, setSelectedDatum] = useState<RunDetails[] | null>(null)\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        // TODO: setup proper pagination (potentially with a request limit of 10/20 ?)\n        setWorkflowRunsStats({})\n        setLoading(true)\n        octokit.actions.listWorkflowRuns({\n            owner: owner,\n            repo: repo,\n            workflow_id: workflowId,\n            per_page: 100,\n        }).then(({data: specificWorkflowRuns}) => {\n\n                const stats = {\n                    totalRuns: specificWorkflowRuns.total_count,\n                    conclusion: {\n                        success: 0,\n                        failure: 0,\n                        cancelled: 0,\n                        startup_failure: 0\n                    },\n                    // list of duration of runs in seconds for each conclusion\n                    durations: {\n                        success: [] as RunResults[],\n                        failure: [] as RunResults[],\n                        cancelled: [] as RunResults[],\n                        startup_failure: [] as RunResults[],\n                    },\n                    earliestRun: new Date(8640000000000000).getTime(),\n                    latestRun: new Date(-8640000000000000).getTime()\n                }\n                // only count completed runs\n                for (const run of specificWorkflowRuns.workflow_runs) {\n                    if (!run.conclusion || run.status !== \"completed\") continue\n                    stats.conclusion[run.conclusion] += 1\n\n                    let createdAtTime = Date.parse(run.created_at)\n                    if (run.run_started_at) {\n                        createdAtTime = Date.parse(run.run_started_at)\n                    }\n                    const updatedAtTime = Date.parse(run.updated_at)\n                    const durationMs = updatedAtTime - createdAtTime\n                    stats.durations[run.conclusion].push({\n                        duration: durationMs / 1000,\n                        details: {\n                            user: (run as any).actor.login,\n                            url: run.html_url,\n                            branch: run.head_branch,\n                        }\n                    })\n\n                    stats.earliestRun = Math.min(stats.earliestRun, createdAtTime)\n                    stats.latestRun = Math.max(stats.latestRun, createdAtTime)\n                }\n\n                console.log(\"stats\", stats)\n                setLoading(false)\n                setWorkflowRunsStats(stats)\n            }\n        ).catch(e => {\n            setLoading(false)\n            console.error(\"error while getting runs in a workflow from github\", e)\n        })\n    }, [owner, repo, workflowId])\n\n    const handleConclusionSelection = (selection: Conclusions) => {\n        setSelectedConclusion(selection);\n    }\n    return (\n        <>\n            {loading &&\n            (\n                <Center pt={150}>\n                    <Spinner\n                        thickness=\"4px\"\n                        speed=\"0.65s\"\n                        emptyColor=\"gray.200\"\n                        color=\"blue.500\"\n                        size=\"xl\"\n\n                    />\n                </Center>\n            )\n            }\n\n            {\n                !loading && !!workflowRunsStats?.durations && (\n                    <Box display=\"flex\"\n                         maxW=\"1840px\"\n                         mx=\"auto\"\n                         pt={50}\n                         justifyContent=\"center\"\n                         flexDirection=\"column\"\n                    >\n                        <>\n                            <Flex justifyContent=\"space-evenly\" pt={10}>\n                                <Flex>Total Runs: {workflowRunsStats.totalRuns}</Flex>\n\n                                <HStack spacing={4}>\n                                    {conclusionValues.map(v => (\n                                        <Button size=\"lg\" borderRadius=\"full\" colorScheme={conclusion2colorScheme[v]}\n                                                onClick={handleConclusionSelection.bind(null, v)}>\n                                            {workflowRunsStats.conclusion[v]} {capitalize(v)}\n                                        </Button>\n                                    ))}\n                                </HStack>\n\n\n                            </Flex>\n                            <br/>\n                            Latest Run: {new Date(workflowRunsStats.latestRun).toLocaleDateString()} <br/>\n                            Earliest Run: {new Date(workflowRunsStats.earliestRun).toLocaleDateString()} <br/>\n                        </>\n\n\n                        <Flex>\n                            <VictoryChart\n                                domainPadding={10}\n                                width={1000}\n                                height={300}\n                                containerComponent={\n                                    <VictoryVoronoiContainer\n                                        labels={({datum}) => `${datum.y} (${(datum.x.toFixed(1))} minutes)`}\n                                        labelComponent={<VictoryTooltip cornerRadius={3}\n                                                                        flyoutStyle={{fill: \"white\", stroke: \"#999\"}}/>}\n                                    />}\n\n                            >\n\n                                <VictoryLabel\n                                    x={500}\n                                    y={25}\n                                    textAnchor=\"middle\"\n                                    text={`Duration of ${selectedConclusion} runs`}\n                                />\n\n                                <VictoryAxis dependentAxis label=\"Total number of runs\"/>\n                                <VictoryAxis label=\"Time (minutes)\"/>\n\n                                <VictoryHistogram\n                                    style={{data: {fill: `var(--chakra-colors-${conclusion2colorScheme[selectedConclusion]}-500)`, strokeWidth: 0}}}\n                                    binSpacing={5}\n                                    bins={50} // TODO: make the number of bins dynamic - perhaps a heuristic based on the number of data points?\n                                    // data must be in this format: [ {x: t1}, {x: t2}, ... ]\n                                    // also convert duration from second to minutes\n                                    data={\n                                        workflowRunsStats.durations[selectedConclusion].map(({duration, details}) => ({\n                                                x: duration / 60,\n                                                details\n                                        }))\n                                    }\n                                    events={[{\n                                        target: \"data\",\n                                        eventHandlers: {\n                                            onClick: () => {\n                                                return [\n                                                    {\n                                                        target: \"data\",\n                                                        mutation: (props) => {\n                                                            for (const d of props.datum.binnedData) {\n                                                                console.log(d.details.url, d.details)\n                                                            }\n                                                            setSelectedDatum(props.datum.binnedData.map(a => (a.details)))\n                                                            return null;\n                                                        }\n                                                    }\n                                                ];\n                                            }\n                                        }\n                                    }]}\n                                />\n                            </VictoryChart>\n                        </Flex>\n                        <Flex>\n                            {selectedDatum &&\n                                <DetailsTable data={selectedDatum}/>\n                            }\n                        </Flex>\n                    </Box>\n                )\n            }\n        </>\n    )\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    Box, Button,\n    Center,\n    ChakraProvider,\n    Flex,\n    Grid,\n    GridItem,\n    HStack, Input,\n    Spinner,\n    Tab,\n    TabList,\n    TabPanel,\n    TabPanels,\n    Tabs,\n} from \"@chakra-ui/react\"\nimport { extendTheme } from \"@chakra-ui/react\"\nimport { WorkflowStats } from './pages/WorkflowStats'\nimport { Octokit } from \"@octokit/rest\";\nimport { useToast } from \"@chakra-ui/react\"\nimport \"focus-visible/dist/focus-visible\"\n\nconst colors = {\n    brand: {\n        activeBlue: \"#0566d6\",\n        900: \"#1a365d\",\n        800: \"#153e75\",\n        700: \"#2a69ac\",\n    },\n}\n\nconst theme = extendTheme({colors})\n\nconst tabStyle = {\n    borderRadius: \"5px\",\n    justifyContent: \"left\",\n}\n\nconst selectedTabStyle = {\n    color: \"white\",\n    bg: \"brand.activeBlue\",\n    borderRadius: \"5px\",\n    justifyContent: \"left\",\n}\n\nconst octokit = new Octokit({\n    auth: process.env.REACT_APP_GITHUB_TOKEN\n});\n\n\nconst App = () => {\n    const [owner, setOwner] = useState(\"\")\n    const [repo, setRepo] = useState(\"\")\n    const [workflowsList, setWorkflowsList] = useState<any>([])\n    const [loading, setLoading] = useState(false)\n    const toast = useToast()\n\n    // TODO: type properly\n    const handleSubmit = async (event: any) => {\n        event.preventDefault()\n        try {\n            setLoading(true)\n            const {data} = await octokit.actions.listRepoWorkflows({\n                owner: event.target.owner.value,\n                repo: event.target.repo.value,\n            })\n            setOwner(event.target.owner.value)\n            setRepo(event.target.repo.value)\n            setWorkflowsList(data.workflows)\n        } catch (e: any) {\n            console.error(\"error while getting list of repo workflows from github\", e)\n            toast({\n                title: \"Retrieval of workflows list failed.\",\n                description: e.toString(),\n                status: \"error\",\n                duration: 9000,\n                isClosable: true,\n            })\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    return (\n        <>\n            <Box display=\"flex\"\n                 maxW=\"1840px\"\n                 mx=\"auto\"\n                 pt={50}\n                 justifyContent=\"center\"\n                 flexDirection=\"column\"\n            >\n\n                <Flex direction=\"row\" justifyContent=\"center\">\n                    <form onSubmit={handleSubmit}>\n                        <HStack spacing=\"30px\">\n                            <Input placeholder=\"Repo owner (organisation)\" name=\"owner\"/>\n                            <Input placeholder=\"Name of the repo\" name=\"repo\"/>\n\n                            <Button w={350} type=\"submit\">Visualize!</Button>\n                        </HStack>\n                    </form>\n                </Flex>\n\n                {loading &&\n                <Center pt={150}>\n                  <Spinner\n                    thickness=\"4px\"\n                    speed=\"0.65s\"\n                    emptyColor=\"gray.200\"\n                    color=\"blue.500\"\n                    size=\"xl\"\n\n                  />\n                </Center>}\n\n                {!loading && !!workflowsList &&\n\n                (<Tabs isLazy orientation=\"vertical\" variant={\"solid-rounded\"} align={\"center\"}\n                       sx={{textAlign: \"left\"}}>\n                        <Grid\n                            templateRows=\"repeat(2, 1fr)\"\n                            templateColumns=\"repeat(5, 1fr)\"\n                            gap={4}\n                        >\n\n                            <GridItem colSpan={1}>\n                                <TabList>\n                                    {workflowsList.map(workflow => (\n                                        <Tab\n                                            sx={tabStyle}\n                                            _hover={{bg: \"gray.100\", color: \"gray.600\"}}\n                                            _selected={selectedTabStyle}\n                                        >\n                                            {workflow.name}\n                                        </Tab>\n                                    ))}\n\n                                </TabList>\n                            </GridItem>\n                            <GridItem colSpan={3}>\n                                <TabPanels>\n                                    {workflowsList.map(workflow => (\n                                        <TabPanel>\n                                            <WorkflowStats workflowId={workflow.id} owner={owner} repo={repo}/>\n                                        </TabPanel>\n                                    ))}\n                                </TabPanels>\n\n                            </GridItem>\n                        </Grid>\n                    </Tabs>\n                )}\n            </Box>\n        </>\n    )\n}\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ChakraProvider theme={theme} resetCSS>\n            <App/>\n        </ChakraProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}